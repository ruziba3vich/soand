{
    "swagger": "2.0",
    "info": {
        "description": "Soand API Documentation",
        "title": "Soand API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "paths": {
        "/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Verifies user authentication via JWT token and returns a success status if the token is valid. This endpoint has an empty response body on success.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Access home endpoint (authentication check)",
                "responses": {
                    "200": {
                        "description": "User authenticated successfully (empty response body)"
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/backgrounds/": {
            "get": {
                "description": "Retrieves a list of background images with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backgrounds"
                ],
                "summary": "Get all background images",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of backgrounds",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a new background image and stores it",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backgrounds"
                ],
                "summary": "Upload a new background image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Background image file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/backgrounds/{id}": {
            "get": {
                "description": "Retrieves a specific background image by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backgrounds"
                ],
                "summary": "Get a background image by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Background ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Background object",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Background not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a background image by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backgrounds"
                ],
                "summary": "Delete a background image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Background ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Background deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Background not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/chat/delete/{message_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific message. The user must be the original sender.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Delete a message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID to delete",
                        "name": "message_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message deleted successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid message ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to delete this message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Could not delete message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chat/direct": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establishes a WebSocket connection for real-time messaging between two users.",
                "tags": [
                    "chat"
                ],
                "summary": "WebSocket for real-time chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipient's user ID",
                        "name": "recipient_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid recipient ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "WebSocket upgrade failed",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chat/direct/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves paginated messages between the authenticated user and another user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get chat messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipient's user ID",
                        "name": "recipient_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of messages per page (default: 10)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns paginated messages",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        " page": {
                                            "type": "integer"
                                        },
                                        " page_size": {
                                            "type": "integer"
                                        },
                                        " total": {
                                            "type": "integer"
                                        },
                                        "messages": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.Message"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid recipient ID or pagination parameters",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Could not fetch messages",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chat/update/{message_id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the content of a specific message. The user must be the original sender.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Update a message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID to update",
                        "name": "message_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New message text",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "new_text": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message updated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid message ID or request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not authorized to update this message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Could not update message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/chats/pin": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Pins or unpins a chat for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Pin or unpin a chat",
                "parameters": [
                    {
                        "description": "Pin chat request",
                        "name": "pinChatRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.PinChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/chats/pinned": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of pinned chats for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Get pinned chats",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of pinned chats",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/comments/react": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds or updates a reaction to a specific comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "React to a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID to react to",
                        "name": "comment_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Reaction details",
                        "name": "reaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_http.ReactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reaction successful",
                        "schema": {
                            "$ref": "#/definitions/internal_http.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID or request body",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not process reaction",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/comments/ws": {
            "get": {
                "description": "Establishes a WebSocket connection for real-time comment updates on a specific post",
                "tags": [
                    "comments"
                ],
                "summary": "WebSocket connection for real-time comments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID to subscribe to comments for",
                        "name": "post_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid post ID",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "WebSocket upgrade failed",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/comments/{comment_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific comment for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Delete a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID (MongoDB ObjectID)",
                        "name": "comment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/internal_http.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not delete comment",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the text of a specific comment for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Update a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID (MongoDB ObjectID)",
                        "name": "comment_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New comment text",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_http.UpdateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment updated successfully",
                        "schema": {
                            "$ref": "#/definitions/internal_http.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID or request body",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not update comment",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/comments/{post_id}": {
            "get": {
                "description": "Retrieves a paginated list of comments for a specific post",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by post ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID (MongoDB ObjectID)",
                        "name": "post_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of comments per page (default: 10)",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of comments with user ID",
                        "schema": {
                            "$ref": "#/definitions/internal_http.GetCommentsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Could not fetch comments",
                        "schema": {
                            "$ref": "#/definitions/internal_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/files": {
            "get": {
                "description": "Retrieves file information using the provided file ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Get file by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID to retrieve",
                        "name": "file_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the file information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Missing or invalid file ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a single file to the storage service (MinIO). The file is sent as form data and stored, returning the file URL on success.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Upload a file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload (Supported formats: any file type supported by MinIO, e.g., images, PDFs, audio. Max size: 10MB recommended)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the uploaded file URL",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid file upload or request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Server error during file upload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "description": "Retrieves a single post using its MongoDB ObjectID from a query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get a post by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Post ID (MongoDB ObjectID)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post details",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.Post"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a post with description and tags from a JSON body. Note: This version does not support file uploads.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "description": "Post creation payload",
                        "name": "postRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_dtos.PostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Post created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.Post"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/all": {
            "get": {
                "description": "Retrieves a paginated list of all posts using query parameters for pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get all posts",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of posts per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of posts",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.PaginatedPostsResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve posts",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/like": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submits a like (or removes a like) for a specific post. The post ID is a query param, and the like status is in the JSON body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Like or unlike a post",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "ID of the post to like/unlike",
                        "name": "post_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Like action",
                        "name": "likeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.LikeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Action completed successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID or request body",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/search/title": {
            "post": {
                "description": "Searches for posts by title (from a JSON body) with pagination (from query parameters).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Search for posts",
                "parameters": [
                    {
                        "description": "Search query payload",
                        "name": "searchRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.SearchRequest"
                        }
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of results per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of matching posts",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.PaginatedPostsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or query parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/posts/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a post by its ID (from the URL path) with data from a JSON body.\n**Security Note:** The current implementation is insecure as it takes `creator_id` from the body and does not check for post ownership.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update a post",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Post ID (MongoDB ObjectID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update in JSON format",
                        "name": "updateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post updated successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID or payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update post",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a post using its MongoDB ObjectID from the URL path.\n**Security Note:** This does not currently check if the requester is the owner of the post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete a post",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex",
                        "description": "Post ID (MongoDB ObjectID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete post",
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/": {
            "post": {
                "description": "Creates a new user with the provided data and returns a JWT authentication token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data (username and password are required)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response containing the JWT token, e.g., {'data': 'jwt_token_string'}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the authenticated user's account using their JWT token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete the authenticated user",
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/background": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the authenticated user's chat background picture using a provided picture ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Set user background picture",
                "parameters": [
                    {
                        "description": "Picture ID (e.g., UUID or MinIO object key)",
                        "name": "background_pic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "pic_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Background picture updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update background picture",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticates a user with username and password, returning a JWT authentication token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "password": {
                                    "type": "string"
                                },
                                "username": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response containing the JWT token, e.g., {'data': 'jwt_token_string'}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to login user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of the currently authenticated user based on the JWT token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "Authenticated user details, wrapped in a 'data' key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/password": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the authenticated user's password after verifying the old password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "description": "Old and new passwords",
                        "name": "passwords",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "new_password": {
                                    "type": "string"
                                },
                                "old_password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/profile/pic": {
            "get": {
                "description": "Retrieves all profile pictures for a given user ID, sorted by posted date (newest to oldest). This is a public endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get all profile pictures for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID for whom to fetch pictures",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of profile pictures with URLs and posted dates, wrapped in a 'data' key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid or missing user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error fetching pictures",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Uploads a single profile picture for the authenticated user. The file is stored, and the reference is added to the user's profile.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Add a new profile picture",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Profile picture file (e.g., .jpg, .png). Max size: 5MB recommended.",
                        "name": "picture",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the uploaded file name/key, e.g., {'data': 'uuid.jpg'}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid file upload or request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error during file upload or database update",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a profile picture from the authenticated user's profile and deletes it from storage.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Delete a profile picture",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The file name/key of the profile picture to delete (e.g., '123456789.jpg')",
                        "name": "file_url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Confirmation of deletion",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid file_url",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error during deletion",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the authenticated user's data based on the provided fields. Only non-nil fields in the request will be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user data",
                "parameters": [
                    {
                        "description": "User update data (fields to update)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/username": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the authenticated user's username to a new value",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user username",
                "parameters": [
                    {
                        "description": "New username",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "new_username": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Username updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - missing or invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update username",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/username/{username}": {
            "get": {
                "description": "Retrieves public user details by their username. This is a public endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a public user profile by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details wrapped in a 'data' key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieves public user details by their ID. This is a public endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a public user profile by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (MongoDB ObjectID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details wrapped in a 'data' key",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_ruziba3vich_soand_internal_dtos.PostRequest": {
            "type": "object",
            "required": [
                "delete_after",
                "description"
            ],
            "properties": {
                "creator_id": {
                    "type": "string"
                },
                "delete_after": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "pics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_soand_internal_models.Comment": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "owner_full_name": {
                    "type": "string"
                },
                "owner_profile_pic": {
                    "type": "string"
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "post_id": {
                    "type": "string"
                },
                "reactions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "reply_to": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "voice_message": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_soand_internal_models.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "pictures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient_id": {
                    "type": "string"
                },
                "sender_id": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_soand_internal_models.PinChatRequest": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "string"
                },
                "pin": {
                    "type": "boolean"
                }
            }
        },
        "github_com_ruziba3vich_soand_internal_models.Post": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp",
                    "type": "string"
                },
                "creator_id": {
                    "description": "Creator id",
                    "type": "string"
                },
                "delete_at": {
                    "description": "Field for automatic deletion",
                    "type": "string"
                },
                "description": {
                    "description": "Post description",
                    "type": "string"
                },
                "id": {
                    "description": "MongoDB ObjectID",
                    "type": "string"
                },
                "likes": {
                    "type": "integer"
                },
                "owner_full_name": {
                    "type": "string"
                },
                "owner_profile_pic": {
                    "type": "string"
                },
                "picture": {
                    "description": "Image URLs or file path",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "reactions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "description": "List of tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_soand_internal_models.ProfilePic": {
            "type": "object",
            "properties": {
                "posted_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_soand_internal_models.User": {
            "type": "object",
            "required": [
                "full_name",
                "password"
            ],
            "properties": {
                "background_pic": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_hidden": {
                    "type": "boolean"
                },
                "profile_pics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.ProfilePic"
                    }
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_soand_internal_models.UserUpdate": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "profile_hidden": {
                    "type": "boolean"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "github_com_ruziba3vich_soand_pkg_swagger.LikeRequest": {
            "type": "object",
            "properties": {
                "like": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "github_com_ruziba3vich_soand_pkg_swagger.PaginatedPostsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.Post"
                    }
                }
            }
        },
        "github_com_ruziba3vich_soand_pkg_swagger.Response": {
            "type": "object",
            "properties": {
                "data": {}
            }
        },
        "github_com_ruziba3vich_soand_pkg_swagger.SearchRequest": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "example": "My awesome post title"
                }
            }
        },
        "github_com_ruziba3vich_soand_pkg_swagger.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                }
            }
        },
        "internal_http.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "internal_http.GetCommentsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "comments": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_ruziba3vich_soand_internal_models.Comment"
                            }
                        },
                        "user_id": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "internal_http.ReactionRequest": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string"
                }
            }
        },
        "internal_http.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                }
            }
        },
        "internal_http.UpdateCommentRequest": {
            "type": "object",
            "required": [
                "new_text"
            ],
            "properties": {
                "new_text": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "\"JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}