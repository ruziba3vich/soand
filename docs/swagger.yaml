definitions:
  github_com_ruziba3vich_soand_internal_dtos.PostRequest:
    properties:
      creator_id:
        type: string
      delete_after:
        type: integer
      description:
        type: string
      pics:
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - delete_after
    - description
    type: object
  github_com_ruziba3vich_soand_internal_models.Comment:
    properties:
      created_at:
        type: string
      id:
        type: string
      owner_full_name:
        type: string
      owner_profile_pic:
        type: string
      pictures:
        items:
          type: string
        type: array
      post_id:
        type: string
      reactions:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      reply_to:
        type: string
      text:
        type: string
      user_id:
        type: string
      voice_message:
        type: string
    type: object
  github_com_ruziba3vich_soand_internal_models.Message:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      pictures:
        items:
          type: string
        type: array
      recipient_id:
        type: string
      sender_id:
        type: string
    type: object
  github_com_ruziba3vich_soand_internal_models.PinChatRequest:
    properties:
      chat_id:
        type: string
      pin:
        type: boolean
    type: object
  github_com_ruziba3vich_soand_internal_models.Post:
    properties:
      created_at:
        description: Timestamp
        type: string
      creator_id:
        description: Creator id
        type: string
      delete_at:
        description: Field for automatic deletion
        type: string
      description:
        description: Post description
        type: string
      id:
        description: MongoDB ObjectID
        type: string
      likes:
        type: integer
      owner_full_name:
        type: string
      owner_profile_pic:
        type: string
      picture:
        description: Image URLs or file path
        items:
          type: string
        type: array
      reactions:
        additionalProperties:
          type: integer
        type: object
      tags:
        description: List of tags
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  github_com_ruziba3vich_soand_internal_models.ProfilePic:
    properties:
      posted_at:
        type: string
      url:
        type: string
    type: object
  github_com_ruziba3vich_soand_internal_models.User:
    properties:
      background_pic:
        type: string
      bio:
        type: string
      full_name:
        type: string
      id:
        type: string
      password:
        type: string
      phone:
        type: string
      profile_hidden:
        type: boolean
      profile_pics:
        items:
          $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.ProfilePic'
        type: array
      status:
        type: string
      username:
        type: string
    required:
    - full_name
    - password
    type: object
  github_com_ruziba3vich_soand_internal_models.UserUpdate:
    properties:
      bio:
        type: string
      full_name:
        type: string
      profile_hidden:
        type: boolean
      userId:
        type: string
    type: object
  github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  github_com_ruziba3vich_soand_pkg_swagger.LikeRequest:
    properties:
      like:
        example: true
        type: boolean
    type: object
  github_com_ruziba3vich_soand_pkg_swagger.PaginatedPostsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.Post'
        type: array
    type: object
  github_com_ruziba3vich_soand_pkg_swagger.Response:
    properties:
      data: {}
    type: object
  github_com_ruziba3vich_soand_pkg_swagger.SearchRequest:
    properties:
      query:
        example: My awesome post title
        type: string
    type: object
  github_com_ruziba3vich_soand_pkg_swagger.SuccessResponse:
    properties:
      data:
        type: string
    type: object
  internal_http.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  internal_http.GetCommentsResponse:
    properties:
      data:
        properties:
          comments:
            items:
              $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.Comment'
            type: array
          user_id:
            type: string
        type: object
    type: object
  internal_http.ReactionRequest:
    properties:
      type:
        type: string
    required:
    - type
    type: object
  internal_http.SuccessResponse:
    properties:
      data:
        type: string
    type: object
  internal_http.UpdateCommentRequest:
    properties:
      new_text:
        type: string
    required:
    - new_text
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Soand API Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Soand API
  version: "1.0"
paths:
  /:
    get:
      description: Verifies user authentication via JWT token and returns a success
        status if the token is valid. This endpoint has an empty response body on
        success.
      produces:
      - application/json
      responses:
        "200":
          description: User authenticated successfully (empty response body)
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Access home endpoint (authentication check)
      tags:
      - users
  /backgrounds/:
    get:
      description: Retrieves a list of background images with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of backgrounds
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid query parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all background images
      tags:
      - backgrounds
    post:
      consumes:
      - multipart/form-data
      description: Uploads a new background image and stores it
      parameters:
      - description: Background image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: File uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Upload a new background image
      tags:
      - backgrounds
  /backgrounds/{id}:
    delete:
      description: Deletes a background image by ID
      parameters:
      - description: Background ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Background deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Background not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a background image
      tags:
      - backgrounds
    get:
      description: Retrieves a specific background image by its ID
      parameters:
      - description: Background ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Background object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Background not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get a background image by ID
      tags:
      - backgrounds
  /chat/delete/{message_id}:
    delete:
      description: Deletes a specific message. The user must be the original sender.
      parameters:
      - description: Message ID to delete
        in: path
        name: message_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Message deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid message ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Not authorized to delete this message
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Message not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Could not delete message
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a message
      tags:
      - chat
  /chat/direct:
    get:
      description: Establishes a WebSocket connection for real-time messaging between
        two users.
      parameters:
      - description: Recipient's user ID
        in: query
        name: recipient_id
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Missing or invalid recipient ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: WebSocket upgrade failed
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: WebSocket for real-time chat
      tags:
      - chat
  /chat/direct/messages:
    get:
      description: Retrieves paginated messages between the authenticated user and
        another user.
      parameters:
      - description: Recipient's user ID
        in: query
        name: recipient_id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of messages per page (default: 10)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns paginated messages
          schema:
            properties:
              data:
                properties:
                  ' page':
                    type: integer
                  ' page_size':
                    type: integer
                  ' total':
                    type: integer
                  messages:
                    items:
                      $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.Message'
                    type: array
                type: object
            type: object
        "400":
          description: Invalid recipient ID or pagination parameters
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Could not fetch messages
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get chat messages
      tags:
      - chat
  /chat/update/{message_id}:
    patch:
      consumes:
      - application/json
      description: Updates the content of a specific message. The user must be the
        original sender.
      parameters:
      - description: Message ID to update
        in: path
        name: message_id
        required: true
        type: string
      - description: New message text
        in: body
        name: message
        required: true
        schema:
          properties:
            new_text:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Message updated successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid message ID or request body
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Not authorized to update this message
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Message not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Could not update message
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a message
      tags:
      - chat
  /chats/pin:
    post:
      consumes:
      - application/json
      description: Pins or unpins a chat for the authenticated user
      parameters:
      - description: Pin chat request
        in: body
        name: pinChatRequest
        required: true
        schema:
          $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.PinChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Pin or unpin a chat
      tags:
      - chats
  /chats/pinned:
    get:
      description: Retrieves a paginated list of pinned chats for the authenticated
        user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of pinned chats
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get pinned chats
      tags:
      - chats
  /comments/{comment_id}:
    delete:
      description: Deletes a specific comment for the authenticated user
      parameters:
      - description: Comment ID (MongoDB ObjectID)
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            $ref: '#/definitions/internal_http.SuccessResponse'
        "400":
          description: Invalid comment ID
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "500":
          description: Could not delete comment
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - comments
    patch:
      consumes:
      - application/json
      description: Updates the text of a specific comment for the authenticated user
      parameters:
      - description: Comment ID (MongoDB ObjectID)
        in: path
        name: comment_id
        required: true
        type: string
      - description: New comment text
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/internal_http.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Comment updated successfully
          schema:
            $ref: '#/definitions/internal_http.SuccessResponse'
        "400":
          description: Invalid comment ID or request body
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "500":
          description: Could not update comment
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a comment
      tags:
      - comments
  /comments/{post_id}:
    get:
      description: Retrieves a paginated list of comments for a specific post
      parameters:
      - description: Post ID (MongoDB ObjectID)
        in: path
        name: post_id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of comments per page (default: 10)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of comments with user ID
          schema:
            $ref: '#/definitions/internal_http.GetCommentsResponse'
        "400":
          description: Invalid post ID
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "500":
          description: Could not fetch comments
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
      summary: Get comments by post ID
      tags:
      - comments
  /comments/react:
    post:
      consumes:
      - application/json
      description: Adds or updates a reaction to a specific comment
      parameters:
      - description: Comment ID to react to
        in: query
        name: comment_id
        required: true
        type: string
      - description: Reaction details
        in: body
        name: reaction
        required: true
        schema:
          $ref: '#/definitions/internal_http.ReactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reaction successful
          schema:
            $ref: '#/definitions/internal_http.SuccessResponse'
        "400":
          description: Invalid comment ID or request body
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "500":
          description: Could not process reaction
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
      security:
      - BearerAuth: []
      summary: React to a comment
      tags:
      - comments
  /comments/ws:
    get:
      description: Establishes a WebSocket connection for real-time comment updates
        on a specific post
      parameters:
      - description: Post ID to subscribe to comments for
        in: query
        name: post_id
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Missing or invalid post ID
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
        "500":
          description: WebSocket upgrade failed
          schema:
            $ref: '#/definitions/internal_http.ErrorResponse'
      summary: WebSocket connection for real-time comments
      tags:
      - comments
  /files:
    get:
      consumes:
      - application/json
      description: Retrieves file information using the provided file ID
      parameters:
      - description: File ID to retrieve
        in: query
        name: file_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns the file information
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Missing or invalid file ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: File not found
          schema:
            additionalProperties: true
            type: object
      summary: Get file by ID
      tags:
      - Files
    post:
      consumes:
      - multipart/form-data
      description: Uploads a single file to the storage service (MinIO). The file
        is sent as form data and stored, returning the file URL on success.
      parameters:
      - description: 'File to upload (Supported formats: any file type supported by
          MinIO, e.g., images, PDFs, audio. Max size: 10MB recommended)'
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Returns the uploaded file URL
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid file upload or request format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error during file upload
          schema:
            additionalProperties: true
            type: object
      summary: Upload a file
      tags:
      - Files
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieves a single post using its MongoDB ObjectID from a query
        parameter.
      parameters:
      - description: Post ID (MongoDB ObjectID)
        format: hex
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post details
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.Post'
        "400":
          description: Invalid post ID format
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
      summary: Get a post by ID
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: 'Creates a post with description and tags from a JSON body. Note:
        This version does not support file uploads.'
      parameters:
      - description: Post creation payload
        in: body
        name: postRequest
        required: true
        schema:
          $ref: '#/definitions/github_com_ruziba3vich_soand_internal_dtos.PostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            allOf:
            - $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.Response'
            - properties:
                data:
                  $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.Post'
              type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Deletes a post using its MongoDB ObjectID from the URL path.
        **Security Note:** This does not currently check if the requester is the owner of the post.
      parameters:
      - description: Post ID (MongoDB ObjectID)
        format: hex
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.SuccessResponse'
        "400":
          description: Invalid post ID format
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "500":
          description: Failed to delete post
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: |-
        Updates a post by its ID (from the URL path) with data from a JSON body.
        **Security Note:** The current implementation is insecure as it takes `creator_id` from the body and does not check for post ownership.
      parameters:
      - description: Post ID (MongoDB ObjectID)
        format: hex
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update in JSON format
        in: body
        name: updateRequest
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.SuccessResponse'
        "400":
          description: Invalid post ID or payload
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "500":
          description: Failed to update post
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - posts
  /posts/all:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of all posts using query parameters
        for pagination.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of posts per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.PaginatedPostsResponse'
        "500":
          description: Failed to retrieve posts
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
      summary: Get all posts
      tags:
      - posts
  /posts/like:
    post:
      consumes:
      - application/json
      description: Submits a like (or removes a like) for a specific post. The post
        ID is a query param, and the like status is in the JSON body.
      parameters:
      - description: ID of the post to like/unlike
        format: hex
        in: query
        name: post_id
        required: true
        type: string
      - description: Like action
        in: body
        name: likeRequest
        required: true
        schema:
          $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.LikeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Action completed successfully
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.SuccessResponse'
        "400":
          description: Invalid post ID or request body
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Like or unlike a post
      tags:
      - posts
  /posts/search/title:
    post:
      consumes:
      - application/json
      description: Searches for posts by title (from a JSON body) with pagination
        (from query parameters).
      parameters:
      - description: Search query payload
        in: body
        name: searchRequest
        required: true
        schema:
          $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.SearchRequest'
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of results per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: A list of matching posts
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.PaginatedPostsResponse'
        "400":
          description: Invalid request payload or query parameters
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_ruziba3vich_soand_pkg_swagger.ErrorResponse'
      summary: Search for posts
      tags:
      - posts
  /users/:
    delete:
      description: Deletes the authenticated user's account using their JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete the authenticated user
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided data and returns a JWT authentication
        token
      parameters:
      - description: User data (username and password are required)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'Response containing the JWT token, e.g., {''data'': ''jwt_token_string''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    get:
      description: Retrieves public user details by their ID. This is a public endpoint.
      parameters:
      - description: User ID (MongoDB ObjectID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details wrapped in a 'data' key
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a public user profile by ID
      tags:
      - users
  /users/background:
    patch:
      consumes:
      - application/json
      description: Updates the authenticated user's chat background picture using
        a provided picture ID
      parameters:
      - description: Picture ID (e.g., UUID or MinIO object key)
        in: body
        name: background_pic
        required: true
        schema:
          properties:
            pic_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Background picture updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update background picture
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Set user background picture
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with username and password, returning a JWT
        authentication token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          properties:
            password:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 'Response containing the JWT token, e.g., {''data'': ''jwt_token_string''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to login user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login a user
      tags:
      - users
  /users/me:
    get:
      description: Retrieves the details of the currently authenticated user based
        on the JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user details, wrapped in a 'data' key
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - users
  /users/password:
    patch:
      consumes:
      - application/json
      description: Updates the authenticated user's password after verifying the old
        password
      parameters:
      - description: Old and new passwords
        in: body
        name: passwords
        required: true
        schema:
          properties:
            new_password:
              type: string
            old_password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update password
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - users
  /users/profile/pic:
    delete:
      description: Removes a profile picture from the authenticated user's profile
        and deletes it from storage.
      parameters:
      - description: The file name/key of the profile picture to delete (e.g., '123456789.jpg')
        in: query
        name: file_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Confirmation of deletion
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Missing or invalid file_url
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error during deletion
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a profile picture
      tags:
      - Profile
    get:
      description: Retrieves all profile pictures for a given user ID, sorted by posted
        date (newest to oldest). This is a public endpoint.
      parameters:
      - description: User ID for whom to fetch pictures
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of profile pictures with URLs and posted dates, wrapped
            in a 'data' key
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid or missing user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error fetching pictures
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all profile pictures for a user
      tags:
      - Profile
    post:
      consumes:
      - multipart/form-data
      description: Uploads a single profile picture for the authenticated user. The
        file is stored, and the reference is added to the user's profile.
      parameters:
      - description: 'Profile picture file (e.g., .jpg, .png). Max size: 5MB recommended.'
        in: formData
        name: picture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'Returns the uploaded file name/key, e.g., {''data'': ''uuid.jpg''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid file upload or request format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error during file upload or database update
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a new profile picture
      tags:
      - Profile
  /users/update:
    put:
      consumes:
      - application/json
      description: Updates the authenticated user's data based on the provided fields.
        Only non-nil fields in the request will be updated.
      parameters:
      - description: User update data (fields to update)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_ruziba3vich_soand_internal_models.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user data
      tags:
      - users
  /users/username:
    patch:
      consumes:
      - application/json
      description: Updates the authenticated user's username to a new value
      parameters:
      - description: New username
        in: body
        name: username
        required: true
        schema:
          properties:
            new_username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Username updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - missing or invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update username
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user username
      tags:
      - users
  /users/username/{username}:
    get:
      description: Retrieves public user details by their username. This is a public
        endpoint.
      parameters:
      - description: Username of the user
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details wrapped in a 'data' key
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a public user profile by username
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: '"JWT Authorization header using the Bearer scheme. Example: ''Bearer
      {token}''"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
